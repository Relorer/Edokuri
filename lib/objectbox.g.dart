// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/models/book.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7555383519736908052),
      name: 'Book',
      lastPropertyId: const IdUid(4, 8135821839891028441),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6689691318167578119),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9158977824534214653),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6144954415665077897),
            name: 'author',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8135821839891028441),
            name: 'cover',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 5203724193353101733),
            name: 'chapters',
            targetId: const IdUid(2, 7150137983610600479))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7150137983610600479),
      name: 'Chapter',
      lastPropertyId: const IdUid(2, 2973545806953025121),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7687381543777686108),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2973545806953025121),
            name: 'content',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7150137983610600479),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(1, 5203724193353101733),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Book: EntityDefinition<Book>(
        model: _entities[0],
        toOneRelations: (Book object) => [],
        toManyRelations: (Book object) =>
            {RelInfo<Book>.toMany(1, object.id): object.chapters},
        getId: (Book object) => object.id,
        setId: (Book object, int id) {
          object.id = id;
        },
        objectToFB: (Book object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final authorOffset = fbb.writeString(object.author);
          final coverOffset =
              object.cover == null ? null : fbb.writeListInt8(object.cover!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, authorOffset);
          fbb.addOffset(3, coverOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Book(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              author: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              cover: const fb.Uint8ListReader(lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10) as Uint8List?);
          InternalToManyAccess.setRelInfo(object.chapters, store,
              RelInfo<Book>.toMany(1, object.id), store.box<Book>());
          return object;
        }),
    Chapter: EntityDefinition<Chapter>(
        model: _entities[1],
        toOneRelations: (Chapter object) => [],
        toManyRelations: (Chapter object) => {},
        getId: (Chapter object) => object.id,
        setId: (Chapter object, int id) {
          object.id = id;
        },
        objectToFB: (Chapter object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Chapter(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// see [Book.id]
  static final id = QueryIntegerProperty<Book>(_entities[0].properties[0]);

  /// see [Book.title]
  static final title = QueryStringProperty<Book>(_entities[0].properties[1]);

  /// see [Book.author]
  static final author = QueryStringProperty<Book>(_entities[0].properties[2]);

  /// see [Book.cover]
  static final cover =
      QueryByteVectorProperty<Book>(_entities[0].properties[3]);

  /// see [Book.chapters]
  static final chapters =
      QueryRelationToMany<Book, Chapter>(_entities[0].relations[0]);
}

/// [Chapter] entity fields to define ObjectBox queries.
class Chapter_ {
  /// see [Chapter.id]
  static final id = QueryIntegerProperty<Chapter>(_entities[1].properties[0]);

  /// see [Chapter.content]
  static final content =
      QueryStringProperty<Chapter>(_entities[1].properties[1]);
}
